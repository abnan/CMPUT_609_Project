import csv
import matplotlib.pyplot as plt
import numpy as np

with open('MC_results2.csv', 'r') as f:
    reader = csv.reader(f)
    result_list = list(reader)

results = np.array(result_list)
#dynamic decay
std_error=[]
dynamic_decay_std_error = [15.432020230935416, 11.925773169400799, 6.725792643845036, 5.793477283290234, 5.137350433053988, 4.380178969859564, 4.04009239894337, 3.8509180983240867, 3.4457575294846268, 3.613835484910734, 3.2390292113533032, 2.9109466006782054, 2.861508167383067, 2.887963927752561, 2.9268109757891776, 2.6639411089586793, 2.474698557804566, 2.3709468150930757, 2.4024823429111817, 2.4978039570790975, 2.2573620072996707, 2.3266062838391885, 2.2299465894949146, 2.1691917462502017, 2.0456699616507055, 2.0054048788212318, 1.893889920771532, 1.9104238084781082, 1.8612589696224433, 1.7444423544502696, 1.7759727385295079, 1.8265900820928596, 1.6353624772508386, 1.6597891408248218, 1.713901131337511, 1.6770242097238788, 1.6175271867885248, 1.6069420674062895, 1.5563127294987984, 1.6535829002502413, 1.6262042454747188, 1.5839194423959826, 1.602040039449701, 1.618899379207985, 1.521832208885066, 1.5576869415899972, 1.5479697025458863, 1.4976030849327202, 1.5798449822688299, 1.549146890388384, 1.4233605418164437, 1.4755724990660404, 1.4813865153969776, 1.4131490480483648, 1.446055047361614, 1.4957674124007383, 1.4018628064115262, 1.4233082898655514, 1.456948471291967, 1.349211609792919, 1.3813446897860069, 1.4346997428033503, 1.389113570590972, 1.334751689266584, 1.4153705832749244, 1.3748084695694889, 1.290449258204289, 1.3268458840423027, 1.3141210781354966, 1.2908651238607387, 1.2263829450868924, 1.337412474893217, 1.253138814337821, 1.2850024124490973, 1.299466352007623, 1.2190244328970605, 1.2180550890661719, 1.1958083157429538, 1.2131495373613264, 1.2151061978279922, 1.257969233328065, 1.2101487511872249, 1.1717119099847029, 1.2359091843659065, 1.248750364164111, 1.2903004890334653, 1.2419149697141103, 1.1744946113116057, 1.1378726958671608, 1.1655693887538399, 1.091721634850203, 1.1612042576566795, 1.11335435149821, 1.1307419723349796, 1.1646711844980109, 1.1226477844809561, 1.1882704607958579, 1.1488898676548593, 1.1712734129997147, 1.1250734518243686, 1.116547664902847, 1.1569421039965655, 1.0433220020683929, 1.0633339080458215, 1.0571236862354374, 1.0710278577142611, 1.0579977315665663, 1.0544081790274578, 1.0293154035571408, 1.0989029110890551, 1.07685249129117, 1.03256519019382, 1.1097041443556026, 1.0525782289217271, 1.05766760752138, 1.07174224886397, 1.041012872158649, 1.059566443409756, 1.0481197603327588, 1.0364174101200732, 1.0363541441032595, 1.0075038461465047, 1.0190399050086312, 1.0491610972581855, 1.0852737903404834, 0.9664302106205084, 1.0641100506996444, 1.0258347781197517, 1.0189322411230297, 1.0387945475405618, 1.0369592894612594, 1.0913685317068655, 1.1274996620842064, 1.1062973596642087, 1.0725032400883459, 1.088806524594705, 1.0476546721129056, 1.015287403644899, 0.9741637808910778, 1.0282033845499634, 1.040970762317559, 1.0993240504964854, 1.1404124832708558, 1.0739993147111409, 1.0885714491938505, 1.0216358451033323, 1.0588355868594521, 1.1186725669292155, 0.9882101638821571, 1.0650215960251699, 1.0707902539713368, 1.115080176489565, 1.0700309490851185, 1.0341172506055587, 1.0983284900247283, 1.090881958783809, 1.1044215282219014, 1.0270703812300304, 1.0894068698149464, 1.087625509079297, 1.011030697852444, 1.04716265785216, 1.0168085404834086, 1.0743007958667814, 1.156283826748433, 1.1059370687340215, 1.088520004409657, 1.0820332712074985, 1.08693845271938, 1.0820914970555862, 1.0787943492621752, 1.0809456748606747, 1.161509707234511, 1.1290713883541643, 1.1047763067698366, 1.0558052850786455, 1.1113311513675839, 1.1475081141325318, 1.133381898567292, 1.0970380886733149, 1.1498906069709414, 1.1134771879118135, 1.1604848779712726, 1.147388446865315, 1.1606063897807903, 1.081999818853959, 1.135703943816345, 1.1215717935112313, 1.0467374073758902, 1.0608241739327022, 1.1148126299966288, 1.1523011273100447, 1.1390857948372457, 1.1448130362640005, 1.185803690329896, 1.115012466298023, 1.115741346370206, 1.221002945123393, 1.0860875066034044, 1.1569314448142551, 1.1027602314193234, 1.1002637647400735, 1.1517057784000215, 1.1868228376636505, 1.1896860056334193, 1.1710328398469445, 1.160021186013428, 1.1869297367578249, 1.119280125795147, 1.1520292496286715, 1.1699092751149551, 1.1537330713817646, 1.115715576659213, 1.167949094781104, 1.143959439840417, 1.243215376352786, 1.1675222961468443, 1.128735278087825, 1.1968737410437242, 1.224146693823906, 1.2514998202157281, 1.1790683610376458, 1.1723805389036446, 1.1109990999096262, 1.193558028752687, 1.1760903502707605, 1.2284263071100356, 1.1964991433344194, 1.2099164400899758, 1.230627950275793, 1.1780841226330148, 1.1938493405786175, 1.1954625247158523, 1.201016382902415, 1.2153788676787167, 1.210984640695331, 1.2100062809754335, 1.2297444417438934, 1.2571112918115084, 1.234080953584488, 1.2207970642166535, 1.2659607924418512, 1.1465052952341739, 1.2440047073865919, 1.2207973623824717, 1.2397235304695962, 1.2361407686829198, 1.2593165257392598, 1.286177331474941, 1.244746926889157, 1.2636071889634057, 1.2390007941886074, 1.2270308749171717, 1.2426365003491568, 1.2254701106106178, 1.2511831552574546, 1.2355912463270369, 1.1715532629803904, 1.2622598654793709, 1.237240555429703, 1.2317829159393305, 1.279847725317352, 1.3328506923132837, 1.2739219787726404, 1.285870176961889, 1.333827467103598, 1.261125579789737, 1.3103778355878886, 1.3464307631660828, 1.2755788991669623, 1.2727840350978636, 1.2322304037800724, 1.3328898409095928, 1.2707782308491122, 1.2615807576211677, 1.2648465646077391, 1.3391759973954132, 1.2365897460354425, 1.3564622545430447, 1.2799862499261467, 1.2251555688972726, 1.3530167064748313, 1.2423719765030117, 1.3256710753425978, 1.2403311686803649, 1.325248145820246, 1.3190559169345324, 1.304998081224643, 1.3562232589068806, 1.3479157807518984, 1.3168789617880603, 1.2972550065426611, 1.3081788134654986, 1.362989901650045, 1.2861401820952487, 1.3426018769538495, 1.2638304284990134, 1.3219836337867423, 1.4495469609502134, 1.2679340645317483, 1.3820147611367974, 1.3170085983014688, 1.4206367586402937, 1.2848349310319982, 1.3756781571283305, 1.410057505210337, 1.3513389389786707, 1.3532904965305859, 1.3015940104348973, 1.3003788863250587, 1.3419341831848535, 1.34000184775992, 1.3130833179962345, 1.3434697644532234, 1.2585760715983758, 1.3889528026538556, 1.3505903272273203, 1.3816917861809848, 1.4014737956879535, 1.38971876003744, 1.3987941206625083, 1.4461213890956732, 1.356160683694967, 1.3843609355944713, 1.3388335221378347, 1.3688426498323318, 1.3690522269073593, 1.392917123162753, 1.4442398249598296, 1.4212133295181268, 1.3148891846843975, 1.3190833180659969, 1.329062298013152, 1.4180860340614034, 1.3830202196641956, 1.4453998173515865, 1.4082536447671632, 1.3789326277958616, 1.4511338987150704, 1.3891223128292194, 1.392616886297161, 1.336201359077291, 1.4040793595805046, 1.451996683191804, 1.4222846859894118, 1.3779512792548219, 1.414763920942289, 1.3599099264289527, 1.426134498565966, 1.3916163264348402]
dynamic_decay_std_error = [1.96*i for i in dynamic_decay_std_error]
std_error.append(dynamic_decay_std_error[60:310])
#td_error_max
td_error_max_std_error = [1.8512122834460073e-05, 0.00016490928234909287, 0.00022049878216018405, 0.0002528324907279812, 0.0002775342139923204, 0.00030317346524797264, 0.0003243823812383532, 0.0003361230541660862, 0.00034161630290341485, 0.0003492465048892151, 0.00034945348157872325, 0.000347917072559156, 0.00034710628160681433, 0.00033926885830399644, 0.0003339181990742858, 0.00032951927139062564, 0.0003321858899158423, 0.0003336990092600892, 0.0003361500676311497, 0.0003335510306989033, 0.00033762131410467795, 0.0003350458479863019, 0.0003269111341778098, 0.000325985335998035, 0.0003257999727453641, 0.0003292167479172471, 0.00033761364649070576, 0.0003370493135172733, 0.00031973435251988, 0.0003227639966872953, 0.00031138414187773027, 0.0003101657751053012, 0.000308880726959523, 0.00030932218269211567, 0.00030289996885732935, 0.00030079355100253087, 0.0003072640651532746, 0.00030462047069395177, 0.00029430829529135226, 0.0002914603986569152, 0.00028750932521723, 0.00029222190839484676, 0.00029987949779907146, 0.0002983496932197172, 0.00029281503142167004, 0.0002883921258421447, 0.0002810071300943846, 0.00028461273151623805, 0.00028786601377109463, 0.0002882699177325783]
td_error_max_std_error = [1.96*i for i in td_error_max_std_error]
std_error.append( td_error_max_std_error[60:310])
# colours = ['r--','b--','r-.','b-.','r-','b-','r:','b:','b--']
colours = ['r','g','b','y','p']

colour_index = 0

for i in range(0, results.shape[0]):
    plotx = np.arange(10, results.shape[1]-1+10)
    ploty = list(map(float, results[i,1:]))
    plotx=plotx[50:300]
    ploty=ploty[50:300]
    plt.plot(plotx, ploty, colours[colour_index], label = results[i,0])
    plt.fill_between(plotx, np.array(ploty)-std_error[i], np.array(ploty)+std_error[i], color=colours[colour_index], alpha=0.3)
    colour_index+=1

plt.xlabel('Episodes')
plt.ylabel('Average Return')
plt.legend()
plt.show()