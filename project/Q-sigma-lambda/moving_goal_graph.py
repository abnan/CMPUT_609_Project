import csv
import matplotlib.pyplot as plt
import numpy as np

with open('MGWG_results.csv', 'r') as f:
    reader = csv.reader(f)
    result_list = list(reader)

results = np.array(result_list)
#dynamic decay
std_error=[]
dynamic_decay_std_error =  [19.039359170308234, 5.813173033636624, 3.7633419954875182, 2.4294489858813693, 1.2140967984473046, 1.089039903309332, 0.8553246161545915, 0.8115461268467731, 0.6880290393580786, 13.419754523500053, 5.648228418805315, 3.1410312058303376, 1.7406423308652512, 1.3913722305695195, 1.2302651710098929, 1.1729316757595054, 0.6126244004281904, 0.8074054124168356, 0.6442440872836939, 9.703724418953781, 5.128374590062626, 2.624707783925669, 2.0453585504747083, 1.5238063853390313, 1.7059542710752826, 0.8974788861026217, 1.0225589347318824, 1.0164918056728263, 1.0542242602975895, 11.060303712104835, 4.484803563591164, 3.0473573756617394, 2.2371438020386623, 1.537170379300877, 1.386184789629436, 1.7250924378131145, 0.9929425985423347, 0.984566095292743, 0.9402020841287223, 9.836425118100584, 4.185880592659077, 2.7398572544933812, 2.351807964949524, 1.9635974574744197, 1.5104972360120343, 1.538836162819162, 1.2249162191758256, 1.398385482976709, 0.709054801126119, 10.721942234315572, 4.512154028288486, 3.12506810101796, 2.407620848680292, 2.0818128808805065, 1.7556069580062612, 1.350537575930414, 1.4924033972086772, 1.105445918622888, 1.1176842447668307, 10.178241384394456, 4.95265863955916, 2.710984987048068, 2.632464539362313, 1.8116984417943278, 1.5210501868774746, 1.2514133286009061, 1.3773765029940066, 1.0810988442321077, 1.211638143589083, 10.411082877347596, 4.5582411941449505, 3.0160339306778376, 2.145579201754156, 2.4666695595478516, 1.3868835477429249, 1.2151213828256004, 1.7148105947888244, 0.9322064015012975, 1.2922889146781353, 9.958844466101468, 4.598869169589411, 2.810946615643917, 2.3650538522409974, 2.081700948503409, 1.563302524785271, 1.1403900578310908, 1.6365656186050095, 1.2943801292510622, 0.8690430691283371, 10.910226925412685, 4.603939824107171, 3.1418180061868655, 2.565982365488895, 1.8055316380501336, 1.920585795792522, 1.3683171430629666, 1.3674287974150656, 1.176344492060043, 0.8767378393795946, 10.227710338829509]
dynamic_decay_std_error = [2.58*i for i in dynamic_decay_std_error]
std_error.append(dynamic_decay_std_error)
#td_error_max
td_error_max_std_error = [14.822999325507636, 3.549125915489614, 2.711300532216967, 2.014144840620954, 1.5311427875936334, 1.2026743466125824, 0.9446922668255523, 0.9119412651042826, 0.9073376240407971, 9.747421541925846, 4.6445369452723675, 2.9183104536700673, 1.9725032397945523, 1.7797638469752124, 1.5414752022008005, 1.6648373794458158, 1.6132525295191742, 1.006890283993246, 0.9360881235225655, 8.607026905441858, 4.472322501676278, 2.930253234107932, 2.0538668873614974, 2.205642395085844, 1.5009953177808386, 1.3931043460559573, 1.2106244665460824, 1.1434250233399659, 0.9784133967807284, 7.262134914472467, 4.137409284081041, 3.178612609929055, 2.5248266308798324, 1.785723375834006, 1.7253659368377479, 1.3177195357890086, 1.8769517774839093, 1.4179665369817447, 0.8709908816973911, 7.611298548867989, 4.6678890303862115, 3.293205657106766, 2.6408679692479913, 1.9530555588615468, 1.5437672671099103, 1.2116301003194003, 1.3107095849195594, 1.1405507261845056, 0.9169450670569094, 8.06994045572828, 4.877154475203754, 3.212427873742849, 2.737568219971877, 1.9767747580339035, 1.6737330656350196, 1.2639683821203747, 1.4068442952224667, 1.2037590439951007, 0.973336344230502, 8.015275914402455, 4.912756830843555, 3.4104736033284304, 2.560723686577683, 1.840807370422012, 1.5425194037677452, 1.2541278339946054, 1.2686404372398028, 1.3037068040782804, 1.0272291097900217, 7.823675939032748, 4.856326668481026, 2.985624955516014, 2.5608857450108924, 1.92082414707854, 1.7491666770208036, 1.5538531449271524, 1.4317086152566099, 1.000767241170493, 1.1843222112246299, 7.968935586638915, 4.313195534519611, 3.0809949651046167, 2.8753750364082937, 2.246934300552642, 1.705450204491472, 1.2021433924453446, 1.2866960165478116, 1.1720150506712788, 1.0814500987100597, 8.113008172065408, 4.708416387597853, 3.256768680149082, 2.283917630738904, 1.9752100688281236, 1.6803018416344133, 1.412490707580054, 1.5965623019475312, 1.1717444597692797, 1.0842973005592154, 7.77487360668969]
td_error_max_std_error = [2.58*i for i in td_error_max_std_error]
std_error.append(td_error_max_std_error)
# colours = ['r--','b--','r-.','b-.','r-','b-','r:','b:','b--']
colours = ['r','g','b','y','p']

colour_index = 0
truncate = 0
for i in range(results.shape[0]):
    plotx = np.arange(results.shape[1]-1)
    ploty = list(map(float, results[i, 1:]))
    plotx=plotx[truncate:]
    ploty=ploty[truncate:]
    # std_error[i]=std_error[i][truncate:]
    plt.plot(plotx, ploty, colours[colour_index], label = results[i,0])
    # plt.fill_between(plotx, np.array(ploty)-std_error[i], np.array(ploty)+std_error[i], color=colours[colour_index], alpha=0.3)
    colour_index+=1

plt.xlabel('Episodes')
plt.ylabel('Average Return')
plt.legend()
plt.show()